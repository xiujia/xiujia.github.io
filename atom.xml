<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cgDeepLearn&#39;s Github Blog</title>
  
  <subtitle>DeepLearn</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-18T08:15:19.452Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>cgDeepLearn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python进程线程 - subprocess</title>
    <link href="http://yoursite.com/2018/01/18/subprocess/"/>
    <id>http://yoursite.com/2018/01/18/subprocess/</id>
    <published>2018-01-18T08:06:40.000Z</published>
    <updated>2018-01-18T08:15:19.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="subprocess"><a href="#subprocess" class="headerlink" title="subprocess"></a>subprocess</h1><p>subprocess模块是python从2.4版本开始引入的模块。主要用来取代 一些旧的模块方法，如os.system、os.spawn、os.popen、commands等。subprocess通过子进程来执行外部指令，并通过input/output/error管道，获取子进程的执行的返回信息。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="subprocess-call"><a href="#subprocess-call" class="headerlink" title="subprocess.call()"></a>subprocess.call()</h3><p>执行命令，并返回执行状态，其中shell参数为False时，命令需要通过列表的方式传入，当shell为True时，可直接传入命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child = subprocess.call([<span class="string">'df'</span>, <span class="string">'-h'</span>], shell=<span class="keyword">False</span>)</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            <span class="number">475</span>M     <span class="number">0</span>  <span class="number">475</span>M   <span class="number">0</span>% /dev</span><br><span class="line">tmpfs            <span class="number">99</span>M  <span class="number">2.9</span>M   <span class="number">97</span>M   <span class="number">3</span>% /run</span><br><span class="line">/dev/vda1        <span class="number">40</span>G  <span class="number">9.5</span>G   <span class="number">28</span>G  <span class="number">26</span>% /</span><br><span class="line">tmpfs           <span class="number">495</span>M  <span class="number">4.0</span>K  <span class="number">495</span>M   <span class="number">1</span>% /dev/shm</span><br><span class="line">tmpfs           <span class="number">5.0</span>M  <span class="number">4.0</span>K  <span class="number">5.0</span>M   <span class="number">1</span>% /run/lock</span><br><span class="line">tmpfs           <span class="number">495</span>M     <span class="number">0</span>  <span class="number">495</span>M   <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">tmpfs            <span class="number">99</span>M     <span class="number">0</span>   <span class="number">99</span>M   <span class="number">0</span>% /run/user/<span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child2 = subprocess.call(<span class="string">'df -h'</span>, shell=<span class="keyword">True</span>)</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            <span class="number">475</span>M     <span class="number">0</span>  <span class="number">475</span>M   <span class="number">0</span>% /dev</span><br><span class="line">tmpfs            <span class="number">99</span>M  <span class="number">2.9</span>M   <span class="number">97</span>M   <span class="number">3</span>% /run</span><br><span class="line">/dev/vda1        <span class="number">40</span>G  <span class="number">9.5</span>G   <span class="number">28</span>G  <span class="number">26</span>% /</span><br><span class="line">tmpfs           <span class="number">495</span>M  <span class="number">4.0</span>K  <span class="number">495</span>M   <span class="number">1</span>% /dev/shm</span><br><span class="line">tmpfs           <span class="number">5.0</span>M  <span class="number">4.0</span>K  <span class="number">5.0</span>M   <span class="number">1</span>% /run/lock</span><br><span class="line">tmpfs           <span class="number">495</span>M     <span class="number">0</span>  <span class="number">495</span>M   <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">tmpfs            <span class="number">99</span>M     <span class="number">0</span>   <span class="number">99</span>M   <span class="number">0</span>% /run/user/<span class="number">1000</span></span><br></pre></td></tr></table></figure><h3 id="subprocess-check-call"><a href="#subprocess-check-call" class="headerlink" title="subprocess.check_call()"></a>subprocess.check_call()</h3><p>用法与subprocess.call()类似，区别是，当返回值不为0时，直接抛出异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>child3 = subprocess.check_call(<span class="string">'df -h'</span>, shell=<span class="keyword">True</span>)</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            <span class="number">475</span>M     <span class="number">0</span>  <span class="number">475</span>M   <span class="number">0</span>% /dev</span><br><span class="line">tmpfs            <span class="number">99</span>M  <span class="number">2.9</span>M   <span class="number">97</span>M   <span class="number">3</span>% /run</span><br><span class="line">/dev/vda1        <span class="number">40</span>G  <span class="number">9.5</span>G   <span class="number">28</span>G  <span class="number">26</span>% /</span><br><span class="line">tmpfs           <span class="number">495</span>M  <span class="number">4.0</span>K  <span class="number">495</span>M   <span class="number">1</span>% /dev/shm</span><br><span class="line">tmpfs           <span class="number">5.0</span>M  <span class="number">4.0</span>K  <span class="number">5.0</span>M   <span class="number">1</span>% /run/lock</span><br><span class="line">tmpfs           <span class="number">495</span>M     <span class="number">0</span>  <span class="number">495</span>M   <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">tmpfs            <span class="number">99</span>M     <span class="number">0</span>   <span class="number">99</span>M   <span class="number">0</span>% /run/user/<span class="number">1000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(child3)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child4 = subprocess.check_call(<span class="string">'df-h'</span>, shell=<span class="keyword">True</span>)</span><br><span class="line">/bin/sh: <span class="number">1</span>: df-h: <span class="keyword">not</span> found</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/home/cg/anaconda3/lib/python3.6/subprocess.py"</span>, line <span class="number">291</span>, <span class="keyword">in</span> check_call</span><br><span class="line">    <span class="keyword">raise</span> CalledProcessError(retcode, cmd)</span><br><span class="line">subprocess.CalledProcessError: Command <span class="string">'df-h'</span> returned non-zero exit status <span class="number">127.</span></span><br></pre></td></tr></table></figure><h3 id="subprocess-check-output"><a href="#subprocess-check-output" class="headerlink" title="subprocess.check_output()"></a>subprocess.check_output()</h3><p>用法与上面两个方法类似，区别是，如果当返回值为0时，不直接输出结果，如果返回值不为0，直接抛出异常。需要说明的是，该方法在python3.x中才有。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>child5 = subprocess.check_output(<span class="string">'df -h'</span>, shell=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child5</span><br><span class="line"><span class="string">b'Filesystem      Size  Used Avail Use% Mounted on\nudev            475M     0  475M   0% /dev\ntmpfs            99M  2.9M   97M   3% /run\n/dev/vda1        40G  9.5G   28G  26% /\ntmpfs           495M  4.0K  495M   1% /dev/shm\ntmpfs           5.0M  4.0K  5.0M   1% /run/lock\ntmpfs           495M     0  495M   0% /sys/fs/cgroup\ntmpfs            99M     0   99M   0% /run/user/1000\n'</span></span><br></pre></td></tr></table></figure><h3 id="subprocess-Popen"><a href="#subprocess-Popen" class="headerlink" title="subprocess.Popen()"></a>subprocess.Popen()</h3><p>在一些复杂场景中，我们需要将一个进程的执行输出作为另一个进程的输入。在另一些场景中，我们需要先进入到某个输入环境，然后再执行一系列的指令等。这个时候我们就需要使用到suprocess的Popen()方法。该方法有以下参数：</p><ul><li>args：shell命令，可以是字符串，或者序列类型，如list,tuple。</li><li>bufsize：缓冲区大小，可不用关心</li><li>stdin,stdout,stderr：分别表示程序的标准输入，标准输出及标准错误</li><li>shell：与上面方法中用法相同</li><li>cwd：用于设置子进程的当前目录</li><li>env：用于指定子进程的环境变量。如果env=None，则默认从父进程继承环境变量</li><li>universal_newlines：不同系统的的换行符不同，当该参数设定为true时，则表示使用\n作为换行符</li></ul><p>示例1：在~/test下创建一个suprocesstest的目录， 以及删除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>child6 = subprocess.Popen(<span class="string">'mkdir subprocesstest'</span>,shell=<span class="keyword">True</span>,cwd=<span class="string">'/home/cg/test'</span>)</span><br><span class="line"><span class="comment"># 查看目录，已经创建该文件夹</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child7 = subprocess.Popen(<span class="string">'rmdir subprocesstest'</span>,shell=<span class="keyword">True</span>,cwd=<span class="string">'/home/cg/test'</span>)</span><br><span class="line"><span class="comment"># 查看目录，已经删除该文件夹</span></span><br></pre></td></tr></table></figure><p>示例2: 使用python执行几个命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">proc = subprocess.Popen([<span class="string">"python"</span>], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">proc.stdin.write(<span class="string">'print(1)\n'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">proc.stdin.write(<span class="string">'print(2)\n'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">proc.stdin.write(<span class="string">'print(3)\n'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">proc.stdin.close()</span><br><span class="line"></span><br><span class="line">cmd_out = proc.stdout.read()</span><br><span class="line">proc.stdout.close()</span><br><span class="line">cmd_error = proc.stderr.read()</span><br><span class="line">proc.stderr.close()</span><br><span class="line"></span><br><span class="line">print(cmd_out)</span><br><span class="line">print(cmd_error)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'1\n2\n3\n'</span></span><br><span class="line"><span class="string">b''</span></span><br></pre></td></tr></table></figure><p>或者使用communicate()方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">proc = subprocess.Popen([<span class="string">"python"</span>], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">proc.stdin.write(<span class="string">'print(1)\n'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">proc.stdin.write(<span class="string">'print(2)\n'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">proc.stdin.write(<span class="string">'print(3)\n'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">out_err_list = proc.communicate()</span><br><span class="line">print(out_err_list)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">b'1\n2\n3\n'</span>, <span class="string">b''</span>) <span class="comment">#(out,err)元组</span></span><br></pre></td></tr></table></figure><p>示例3: 将一个子进程的输出，作为另一个子进程的输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类似于shell的cat /etc/passwd | grep 0:0</span></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">child1 = subprocess.Popen([<span class="string">"cat"</span>,<span class="string">"/etc/passwd"</span>], stdout=subprocess.PIPE)</span><br><span class="line">child2 = subprocess.Popen([<span class="string">"grep"</span>,<span class="string">"0:0"</span>],stdin=child1.stdout, stdout=subprocess.PIPE)</span><br><span class="line">out = child2.communicate()</span><br></pre></td></tr></table></figure><p>其他方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">child = subprocess.Popen(<span class="string">'sleep 60'</span>,shell=<span class="keyword">True</span>,stdout=subprocess.PIPE)</span><br><span class="line">child.poll()    <span class="comment">#检查子进程状态</span></span><br><span class="line">child.kill()     <span class="comment">#终止子进程</span></span><br><span class="line">child.send_signal()    <span class="comment">#向子进程发送信号</span></span><br><span class="line">child.terminate()   <span class="comment">#终止子进程</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;subprocess&quot;&gt;&lt;a href=&quot;#subprocess&quot; class=&quot;headerlink&quot; title=&quot;subprocess&quot;&gt;&lt;/a&gt;subprocess&lt;/h1&gt;&lt;p&gt;subprocess模块是python从2.4版本开始引入的模块。主要用来取
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="subprocess" scheme="http://yoursite.com/tags/subprocess/"/>
    
  </entry>
  
  <entry>
    <title>Github + hexo + Next 搭建免费个人博客</title>
    <link href="http://yoursite.com/2018/01/12/deploy-hexo-next/"/>
    <id>http://yoursite.com/2018/01/12/deploy-hexo-next/</id>
    <published>2018-01-12T04:45:37.000Z</published>
    <updated>2018-01-15T08:59:42.853Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="技术随笔" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="next" scheme="http://yoursite.com/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/01/10/hello-world/"/>
    <id>http://yoursite.com/2018/01/10/hello-world/</id>
    <published>2018-01-10T02:01:02.000Z</published>
    <updated>2018-01-18T08:08:52.878Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="技巧" scheme="http://yoursite.com/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="next" scheme="http://yoursite.com/tags/next/"/>
    
  </entry>
  
</feed>
