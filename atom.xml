<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cgDeepLearn</title>
  
  <subtitle>More than code</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-18T08:53:13.253Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>cgDeepLearn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python进程线程 - threading</title>
    <link href="http://yoursite.com/2018/01/18/threading/"/>
    <id>http://yoursite.com/2018/01/18/threading/</id>
    <published>2018-01-18T08:17:48.000Z</published>
    <updated>2018-01-18T08:53:13.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python线程简介"><a href="#python线程简介" class="headerlink" title="python线程简介"></a>python线程简介</h2><p>可以用线程来执行阻塞式I/O,但不要用它做平行计算</p><p>标准的Python实现叫做CPython。Cpython分两步来运行Python程序：</p><ol><li>首先，把文本形式的源代码解析并编译成字节码</li><li>然后，用一种基于栈的解释器来运行这份字节码</li></ol><p>执行Python程序时，字节码解释器必须保持协调一致的状态。Python采用GIL(global inerpreter lock,全局解释器锁)机制来确保这种协调性(coherence)。</p><p>GIL实际上就是一把互斥锁(mutual-exclusion-lock,又称为mutex)，用以防止CPython受到占先式多线程切换(preemptive multithreaing)操作的干扰。</p><p>GIL有一种非常显著额负面影响。用C++或者Java等语言写程序时，可以同时执行多条线程，以充分利用计算机所配备的多个CPU核心。Python程序尽管也支持多线程，但由于受到GIL保护，所以同一时刻，只有一条线程可以向前执行。这就意味着，如果我们想利用多线程做平行计算(parallel computation)， 并希望借此为Python程序提速，那么结果会非常令人失望。</p><p>既然如此，Python为什么还要支持多线程呢？</p><ul><li>首先，多线程使得到程序看上去好像能够在同一时间做许多事情。如果要自己实现这种效果，并手工管理任务之间的切换，那就显得比较困难</li><li>其次，在处理阻塞式I/O时很有用。读写文件、在网络间通信，以及与显示器等设备相交互等，都属于阻塞式的I/O操作。为了响应这种阻塞式的请求，操作系统必须花一些时间，而开发者可以借助多线程，把python程序与这些耗时的I/O操作隔离开。(python在执行系统调用的时候会释放GIL)。当然除了线程，还有一些其他的方，也能处理阻塞式的I/O操作，例如内置的asyncio模块等。相对于这些模块，使用多线程来实现会比较简单一些。</li></ul><h2 id="使用线程"><a href="#使用线程" class="headerlink" title="使用线程"></a>使用线程</h2><h3 id="threading-Thread"><a href="#threading-Thread" class="headerlink" title="threading.Thread"></a>threading.Thread</h3><p>Thread 是threading模块中最重要的类之一，可以使用它来创建线程。有两种方式来创建线程：</p><ul><li>一种是创建一个threading.Thread对象，在它的初始化函数（<strong>init</strong>）中将可调用对象作为参数传入。</li><li>另一种是通过继承Thread类，重写它的run方法；</li></ul><p>下面分别举例说明：开启<code>4</code>个线程，每个线程进行<code>10</code>次<code>+1</code>操作</p><ul><li>先来看看通过创建继承<code>threading.Thread</code>对象来创建线程的例子：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(loop)</span>:</span></span><br><span class="line">    <span class="string">"""创建threading.Thread对象的方式创建线程"""</span></span><br><span class="line">    <span class="keyword">global</span> func1_count, func1_lock</span><br><span class="line">    thread_name = threading.currentThread().getName()  <span class="comment"># 获取线程名</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(loop):</span><br><span class="line">        <span class="keyword">with</span> func1_lock:</span><br><span class="line">            func1_count += <span class="number">1</span></span><br><span class="line">        print(thread_name, func1_count)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1_main</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> func1_count, func1_lock</span><br><span class="line">    threads = []</span><br><span class="line">    func1_count = <span class="number">0</span></span><br><span class="line">    func1_lock = threading.Lock()  <span class="comment"># 线程中使用Lock防止数据竞争</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        t = threading.Thread(target=func1,args=(<span class="number">10</span>, ))</span><br><span class="line">        threads.append(t)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.start()  <span class="comment"># 启动所有线程</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()  <span class="comment"># 主线程中等待所有子线程退出</span></span><br></pre></td></tr></table></figure><ul><li><code>继承Thread类</code>:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    my_count = <span class="number">0</span>  <span class="comment"># 类变量</span></span><br><span class="line">    my_lock = threading.Lock()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, loop=<span class="number">10</span>)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self._loop = loop</span><br><span class="line">        <span class="comment"># self._count = init_count</span></span><br><span class="line">        <span class="comment"># self._lock = threading.Lock()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        thread_name = threading.currentThread().getName()</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(self._loop):</span><br><span class="line">            <span class="keyword">with</span> Counter.my_lock:</span><br><span class="line">                Counter.my_count += <span class="number">1</span></span><br><span class="line">            print(thread_name, Counter.my_count)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2_main</span><span class="params">(num)</span>:</span></span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(num):</span><br><span class="line">        t = Counter()  <span class="comment"># 默认loop为10，init_count为0</span></span><br><span class="line">        t.start()</span><br><span class="line">        threads.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure><ul><li>相对于方法一的修改，不使用<code>global</code>而是使用一个<code>自定义的counter类</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockingCounter</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, init_count)</span>:</span></span><br><span class="line">        self._lock = threading.Lock()</span><br><span class="line">        self._count = init_count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increase</span><span class="params">(self, offset=<span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> self._lock:</span><br><span class="line">            self._count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(index, loop, counter)</span>:</span></span><br><span class="line">    thread_name = threading.currentThread().getName()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(loop):</span><br><span class="line">        counter.increase(<span class="number">1</span>)</span><br><span class="line">        print(thread_name, counter._count)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3_main</span><span class="params">(num, func, loop, counter)</span>:</span></span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        args = (i, loop, counter)</span><br><span class="line">        t = threading.Thread(target=func, args=args)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'-----method1-----:'</span>)</span><br><span class="line">    thread_num = <span class="number">4</span></span><br><span class="line">    func1_main(thread_num) </span><br><span class="line">    print(<span class="string">'-----method2-----:'</span>)</span><br><span class="line">    func2_main(thread_num)</span><br><span class="line">    print(<span class="string">'-----method3-----:'</span>)</span><br><span class="line">    counter = LockingCounter(<span class="number">0</span>)</span><br><span class="line">    func3_main(thread_num, worker, <span class="number">10</span>, counter)</span><br></pre></td></tr></table></figure><h3 id="使用Queue来协调各线程之间的工作"><a href="#使用Queue来协调各线程之间的工作" class="headerlink" title="使用Queue来协调各线程之间的工作"></a>使用Queue来协调各线程之间的工作</h3><p>管线(Pipeline)是一种优秀的任务处理方式，它可以把处理流程分为若干阶段，并使用多条Python线程来同时执行这些任务</p><p>构建并发式的管线时，要注意许多问题，其中包括：如何防止某个阶段陷入持续等待的状态之中、如何停止工作线程，以及如何防止内存膨胀等。</p><p>Queue类所提供的的机制，可以彻底解决上述问题，它具备阻塞式的队列操作、能够制定缓冲区尺寸，而且还支持join方法，这使得开发者可以构建出健壮的管线。</p><ul><li>示例：生产者消费者模型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue  <span class="comment"># 队列模块</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line">q = Queue()</span><br><span class="line">sentinel = object()  <span class="comment"># 结束标记</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Producer</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="string">"""生产者函数</span></span><br><span class="line"><span class="string">    nums:product起始编号元组,例如(1,10)"""</span></span><br><span class="line">    thread_name = threading.currentThread().getName()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> range(*nums):</span><br><span class="line">        q.put(item)</span><br><span class="line">        print(<span class="string">'[+] %s 生产 item%s'</span> % (thread_name,item))</span><br><span class="line">        time.sleep(random.randrange(<span class="number">2</span>))  <span class="comment"># 控制生产速度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Consumer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""消费者函数"""</span></span><br><span class="line">    thread_name = threading.currentThread().getName()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = q.get()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">is</span> sentinel:</span><br><span class="line">            print(<span class="string">'[x] %s 退出'</span> % thread_name)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(<span class="string">'[-] %s 消费 item%s'</span> % (thread_name, data))</span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""主函数"""</span></span><br><span class="line">    pnum = <span class="number">2</span></span><br><span class="line">    cnum = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生产者线程，每个线程生产10个，1号线程生产1，10，2号生产11-20......</span></span><br><span class="line">    pthreads = [</span><br><span class="line">        threading.Thread(target=Producer,</span><br><span class="line">                         args=((i * <span class="number">10</span> + <span class="number">1</span>, (i + <span class="number">1</span>) * <span class="number">10</span> + <span class="number">1</span>),),</span><br><span class="line">                         name=<span class="string">"生产者%d号"</span> % (i + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(pnum)]</span><br><span class="line">    <span class="comment"># 消费者线程</span></span><br><span class="line">    cthreads = [</span><br><span class="line">        threading.Thread(target=Consumer, name=<span class="string">"消费者%d号"</span> % (i + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(cnum)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> chain(pthreads, cthreads):</span><br><span class="line">        thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> pt <span class="keyword">in</span> pthreads:</span><br><span class="line">        pt.join()  <span class="comment"># 生产线程阻塞</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(cnum):</span><br><span class="line">        q.put(sentinel)  <span class="comment"># put结束标记</span></span><br><span class="line">    <span class="keyword">for</span> ct <span class="keyword">in</span> cthreads:</span><br><span class="line">        ct.join()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"all done"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">[+] 生产者<span class="number">1</span>号 生产 item8</span><br><span class="line">[-] 消费者<span class="number">2</span>号 消费 item8</span><br><span class="line">[+] 生产者<span class="number">1</span>号 生产 item9</span><br><span class="line">[-] 消费者<span class="number">3</span>号 消费 item9</span><br><span class="line">[+] 生产者<span class="number">1</span>号 生产 item10</span><br><span class="line">[-] 消费者<span class="number">2</span>号 消费 item10</span><br><span class="line">[x] 消费者<span class="number">1</span>号 退出</span><br><span class="line">[x] 消费者<span class="number">3</span>号 退出</span><br><span class="line">[x] 消费者<span class="number">2</span>号 退出</span><br><span class="line">all done</span><br></pre></td></tr></table></figure><ul><li>管线</li></ul><p>我们构建一个有三个阶段的管线：下载图片–&gt;&gt;调整大小–&gt;&gt;重新上传</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""用threading模块和Queue实现管线"""</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosableQueue</span><span class="params">(Queue)</span>:</span></span><br><span class="line">    <span class="string">"""带有终止信号的Queue</span></span><br><span class="line"><span class="string">    close时put终止信号"""</span></span><br><span class="line">    SENTINEL = object()  <span class="comment"># 终止信号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.put(self.SENTINEL)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            item = self.get()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> item <span class="keyword">is</span> self.SENTINEL:</span><br><span class="line">                    <span class="keyword">return</span> <span class="comment"># 致使线程退出</span></span><br><span class="line">                <span class="keyword">yield</span> item</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                self.task_done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StopableWorker</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="string">"""queue遇到终止信号的线程退出"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, in_queue, out_queue)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.func = func</span><br><span class="line">        self.in_queue = in_queue</span><br><span class="line">        self.out_queue = out_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.in_queue:</span><br><span class="line">            result = self.func(item)</span><br><span class="line">            <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                self.out_queue.put(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(item)</span>:</span></span><br><span class="line">    <span class="string">"""下载"""</span></span><br><span class="line">    print(<span class="string">'download item '</span>, item)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> item </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resize</span><span class="params">(item)</span>:</span></span><br><span class="line">    <span class="string">"""调整"""</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'resize item '</span>, item)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">(item)</span>:</span></span><br><span class="line">    <span class="string">"""上传"""</span></span><br><span class="line">    print(<span class="string">'upload item '</span>, item)</span><br><span class="line">    <span class="keyword">return</span> item </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""主程序"""</span></span><br><span class="line">    <span class="comment"># 各阶段队列</span></span><br><span class="line">    download_queue = ClosableQueue()</span><br><span class="line">    resize_queue = ClosableQueue()</span><br><span class="line">    upload_queue = ClosableQueue()</span><br><span class="line">    out_queue = Queue()</span><br><span class="line">    <span class="comment"># 线程</span></span><br><span class="line">    threads = [</span><br><span class="line">        StopableWorker(download, download_queue, resize_queue),</span><br><span class="line">        StopableWorker(resize, resize_queue, upload_queue),</span><br><span class="line">        StopableWorker(upload, upload_queue, out_queue)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">        download_queue.put(i)</span><br><span class="line"></span><br><span class="line">    download_queue.close()</span><br><span class="line">    download_queue.join()</span><br><span class="line"></span><br><span class="line">    resize_queue.close()</span><br><span class="line">    resize_queue.join()</span><br><span class="line"></span><br><span class="line">    upload_queue.close()</span><br><span class="line">    upload_queue.join()</span><br><span class="line"></span><br><span class="line">    print(out_queue.qsize(), <span class="string">'pictures finished'</span>)</span><br><span class="line">    <span class="comment"># while not out_queue.empty():</span></span><br><span class="line">    <span class="comment">#     print(out_queue.get())</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">upload item  <span class="number">96</span></span><br><span class="line">resize item  <span class="number">97</span></span><br><span class="line">upload item  <span class="number">97</span></span><br><span class="line">resize item  <span class="number">98</span></span><br><span class="line">download item  <span class="number">99</span></span><br><span class="line">download item  <span class="number">100</span></span><br><span class="line">resize item  <span class="number">99</span></span><br><span class="line">upload item  <span class="number">98</span></span><br><span class="line">upload item  <span class="number">99</span></span><br><span class="line">resize item  <span class="number">100</span></span><br><span class="line">upload item  <span class="number">100</span></span><br><span class="line"><span class="number">100</span> pictures finished</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python线程简介&quot;&gt;&lt;a href=&quot;#python线程简介&quot; class=&quot;headerlink&quot; title=&quot;python线程简介&quot;&gt;&lt;/a&gt;python线程简介&lt;/h2&gt;&lt;p&gt;可以用线程来执行阻塞式I/O,但不要用它做平行计算&lt;/p&gt;
&lt;p&gt;标准的Py
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Thread" scheme="http://yoursite.com/tags/Thread/"/>
    
      <category term="Queue" scheme="http://yoursite.com/tags/Queue/"/>
    
      <category term="Producer_Consumer" scheme="http://yoursite.com/tags/Producer-Consumer/"/>
    
      <category term="Pipeline" scheme="http://yoursite.com/tags/Pipeline/"/>
    
  </entry>
  
  <entry>
    <title>Python进程线程 - subprocess</title>
    <link href="http://yoursite.com/2018/01/18/subprocess/"/>
    <id>http://yoursite.com/2018/01/18/subprocess/</id>
    <published>2018-01-18T08:06:40.000Z</published>
    <updated>2018-01-18T08:52:12.846Z</updated>
    
    <content type="html"><![CDATA[<p>subprocess模块是python从2.4版本开始引入的模块。主要用来取代 一些旧的模块方法，如os.system、os.spawn、os.popen、commands等。subprocess通过子进程来执行外部指令，并通过input/output/error管道，获取子进程的执行的返回信息。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="subprocess-call"><a href="#subprocess-call" class="headerlink" title="subprocess.call()"></a>subprocess.call()</h3><p>执行命令，并返回执行状态，其中shell参数为False时，命令需要通过列表的方式传入，当shell为True时，可直接传入命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child = subprocess.call([<span class="string">'df'</span>, <span class="string">'-h'</span>], shell=<span class="keyword">False</span>)</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            <span class="number">475</span>M     <span class="number">0</span>  <span class="number">475</span>M   <span class="number">0</span>% /dev</span><br><span class="line">tmpfs            <span class="number">99</span>M  <span class="number">2.9</span>M   <span class="number">97</span>M   <span class="number">3</span>% /run</span><br><span class="line">/dev/vda1        <span class="number">40</span>G  <span class="number">9.5</span>G   <span class="number">28</span>G  <span class="number">26</span>% /</span><br><span class="line">tmpfs           <span class="number">495</span>M  <span class="number">4.0</span>K  <span class="number">495</span>M   <span class="number">1</span>% /dev/shm</span><br><span class="line">tmpfs           <span class="number">5.0</span>M  <span class="number">4.0</span>K  <span class="number">5.0</span>M   <span class="number">1</span>% /run/lock</span><br><span class="line">tmpfs           <span class="number">495</span>M     <span class="number">0</span>  <span class="number">495</span>M   <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">tmpfs            <span class="number">99</span>M     <span class="number">0</span>   <span class="number">99</span>M   <span class="number">0</span>% /run/user/<span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child2 = subprocess.call(<span class="string">'df -h'</span>, shell=<span class="keyword">True</span>)</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            <span class="number">475</span>M     <span class="number">0</span>  <span class="number">475</span>M   <span class="number">0</span>% /dev</span><br><span class="line">tmpfs            <span class="number">99</span>M  <span class="number">2.9</span>M   <span class="number">97</span>M   <span class="number">3</span>% /run</span><br><span class="line">/dev/vda1        <span class="number">40</span>G  <span class="number">9.5</span>G   <span class="number">28</span>G  <span class="number">26</span>% /</span><br><span class="line">tmpfs           <span class="number">495</span>M  <span class="number">4.0</span>K  <span class="number">495</span>M   <span class="number">1</span>% /dev/shm</span><br><span class="line">tmpfs           <span class="number">5.0</span>M  <span class="number">4.0</span>K  <span class="number">5.0</span>M   <span class="number">1</span>% /run/lock</span><br><span class="line">tmpfs           <span class="number">495</span>M     <span class="number">0</span>  <span class="number">495</span>M   <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">tmpfs            <span class="number">99</span>M     <span class="number">0</span>   <span class="number">99</span>M   <span class="number">0</span>% /run/user/<span class="number">1000</span></span><br></pre></td></tr></table></figure><h3 id="subprocess-check-call"><a href="#subprocess-check-call" class="headerlink" title="subprocess.check_call()"></a>subprocess.check_call()</h3><p>用法与subprocess.call()类似，区别是，当返回值不为0时，直接抛出异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>child3 = subprocess.check_call(<span class="string">'df -h'</span>, shell=<span class="keyword">True</span>)</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            <span class="number">475</span>M     <span class="number">0</span>  <span class="number">475</span>M   <span class="number">0</span>% /dev</span><br><span class="line">tmpfs            <span class="number">99</span>M  <span class="number">2.9</span>M   <span class="number">97</span>M   <span class="number">3</span>% /run</span><br><span class="line">/dev/vda1        <span class="number">40</span>G  <span class="number">9.5</span>G   <span class="number">28</span>G  <span class="number">26</span>% /</span><br><span class="line">tmpfs           <span class="number">495</span>M  <span class="number">4.0</span>K  <span class="number">495</span>M   <span class="number">1</span>% /dev/shm</span><br><span class="line">tmpfs           <span class="number">5.0</span>M  <span class="number">4.0</span>K  <span class="number">5.0</span>M   <span class="number">1</span>% /run/lock</span><br><span class="line">tmpfs           <span class="number">495</span>M     <span class="number">0</span>  <span class="number">495</span>M   <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">tmpfs            <span class="number">99</span>M     <span class="number">0</span>   <span class="number">99</span>M   <span class="number">0</span>% /run/user/<span class="number">1000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(child3)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child4 = subprocess.check_call(<span class="string">'df-h'</span>, shell=<span class="keyword">True</span>)</span><br><span class="line">/bin/sh: <span class="number">1</span>: df-h: <span class="keyword">not</span> found</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/home/cg/anaconda3/lib/python3.6/subprocess.py"</span>, line <span class="number">291</span>, <span class="keyword">in</span> check_call</span><br><span class="line">    <span class="keyword">raise</span> CalledProcessError(retcode, cmd)</span><br><span class="line">subprocess.CalledProcessError: Command <span class="string">'df-h'</span> returned non-zero exit status <span class="number">127.</span></span><br></pre></td></tr></table></figure><h3 id="subprocess-check-output"><a href="#subprocess-check-output" class="headerlink" title="subprocess.check_output()"></a>subprocess.check_output()</h3><p>用法与上面两个方法类似，区别是，如果当返回值为0时，不直接输出结果，如果返回值不为0，直接抛出异常。需要说明的是，该方法在python3.x中才有。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>child5 = subprocess.check_output(<span class="string">'df -h'</span>, shell=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child5</span><br><span class="line"><span class="string">b'Filesystem      Size  Used Avail Use% Mounted on\nudev            475M     0  475M   0% /dev\ntmpfs            99M  2.9M   97M   3% /run\n/dev/vda1        40G  9.5G   28G  26% /\ntmpfs           495M  4.0K  495M   1% /dev/shm\ntmpfs           5.0M  4.0K  5.0M   1% /run/lock\ntmpfs           495M     0  495M   0% /sys/fs/cgroup\ntmpfs            99M     0   99M   0% /run/user/1000\n'</span></span><br></pre></td></tr></table></figure><h3 id="subprocess-Popen"><a href="#subprocess-Popen" class="headerlink" title="subprocess.Popen()"></a>subprocess.Popen()</h3><p>在一些复杂场景中，我们需要将一个进程的执行输出作为另一个进程的输入。在另一些场景中，我们需要先进入到某个输入环境，然后再执行一系列的指令等。这个时候我们就需要使用到suprocess的Popen()方法。该方法有以下参数：</p><ul><li>args：shell命令，可以是字符串，或者序列类型，如list,tuple。</li><li>bufsize：缓冲区大小，可不用关心</li><li>stdin,stdout,stderr：分别表示程序的标准输入，标准输出及标准错误</li><li>shell：与上面方法中用法相同</li><li>cwd：用于设置子进程的当前目录</li><li>env：用于指定子进程的环境变量。如果env=None，则默认从父进程继承环境变量</li><li>universal_newlines：不同系统的的换行符不同，当该参数设定为true时，则表示使用\n作为换行符</li></ul><p>示例1：在~/test下创建一个suprocesstest的目录， 以及删除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>child6 = subprocess.Popen(<span class="string">'mkdir subprocesstest'</span>,shell=<span class="keyword">True</span>,cwd=<span class="string">'/home/cg/test'</span>)</span><br><span class="line"><span class="comment"># 查看目录，已经创建该文件夹</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child7 = subprocess.Popen(<span class="string">'rmdir subprocesstest'</span>,shell=<span class="keyword">True</span>,cwd=<span class="string">'/home/cg/test'</span>)</span><br><span class="line"><span class="comment"># 查看目录，已经删除该文件夹</span></span><br></pre></td></tr></table></figure><p>示例2: 使用python执行几个命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">proc = subprocess.Popen([<span class="string">"python"</span>], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">proc.stdin.write(<span class="string">'print(1)\n'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">proc.stdin.write(<span class="string">'print(2)\n'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">proc.stdin.write(<span class="string">'print(3)\n'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">proc.stdin.close()</span><br><span class="line"></span><br><span class="line">cmd_out = proc.stdout.read()</span><br><span class="line">proc.stdout.close()</span><br><span class="line">cmd_error = proc.stderr.read()</span><br><span class="line">proc.stderr.close()</span><br><span class="line"></span><br><span class="line">print(cmd_out)</span><br><span class="line">print(cmd_error)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'1\n2\n3\n'</span></span><br><span class="line"><span class="string">b''</span></span><br></pre></td></tr></table></figure><p>或者使用communicate()方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">proc = subprocess.Popen([<span class="string">"python"</span>], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">proc.stdin.write(<span class="string">'print(1)\n'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">proc.stdin.write(<span class="string">'print(2)\n'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">proc.stdin.write(<span class="string">'print(3)\n'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">out_err_list = proc.communicate()</span><br><span class="line">print(out_err_list)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">b'1\n2\n3\n'</span>, <span class="string">b''</span>) <span class="comment">#(out,err)元组</span></span><br></pre></td></tr></table></figure><p>示例3: 将一个子进程的输出，作为另一个子进程的输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类似于shell的cat /etc/passwd | grep 0:0</span></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">child1 = subprocess.Popen([<span class="string">"cat"</span>,<span class="string">"/etc/passwd"</span>], stdout=subprocess.PIPE)</span><br><span class="line">child2 = subprocess.Popen([<span class="string">"grep"</span>,<span class="string">"0:0"</span>],stdin=child1.stdout, stdout=subprocess.PIPE)</span><br><span class="line">out = child2.communicate()</span><br></pre></td></tr></table></figure><p>其他方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">child = subprocess.Popen(<span class="string">'sleep 60'</span>,shell=<span class="keyword">True</span>,stdout=subprocess.PIPE)</span><br><span class="line">child.poll()    <span class="comment">#检查子进程状态</span></span><br><span class="line">child.kill()     <span class="comment">#终止子进程</span></span><br><span class="line">child.send_signal()    <span class="comment">#向子进程发送信号</span></span><br><span class="line">child.terminate()   <span class="comment">#终止子进程</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;subprocess模块是python从2.4版本开始引入的模块。主要用来取代 一些旧的模块方法，如os.system、os.spawn、os.popen、commands等。subprocess通过子进程来执行外部指令，并通过input/output/error管道，获取
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="subprocess" scheme="http://yoursite.com/tags/subprocess/"/>
    
  </entry>
  
  <entry>
    <title>Github + hexo + Next 搭建免费个人博客</title>
    <link href="http://yoursite.com/2018/01/12/deploy-hexo-next/"/>
    <id>http://yoursite.com/2018/01/12/deploy-hexo-next/</id>
    <published>2018-01-12T04:45:37.000Z</published>
    <updated>2018-01-18T08:17:27.076Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="技术随笔" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="next" scheme="http://yoursite.com/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/01/10/hello-world/"/>
    <id>http://yoursite.com/2018/01/10/hello-world/</id>
    <published>2018-01-10T02:01:02.000Z</published>
    <updated>2018-01-18T08:08:52.878Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="技巧" scheme="http://yoursite.com/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="next" scheme="http://yoursite.com/tags/next/"/>
    
  </entry>
  
</feed>
